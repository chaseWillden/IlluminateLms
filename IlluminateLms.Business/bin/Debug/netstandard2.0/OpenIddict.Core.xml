<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenIddict.Core</name>
    </assembly>
    <members>
        <member name="T:OpenIddict.Core.OpenIddictApplicationDescriptor">
            <summary>
            Represents an OpenIddict application descriptor.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictApplicationDescriptor.ClientId">
            <summary>
            Gets or sets the client identifier
            associated with the application.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictApplicationDescriptor.ClientSecret">
            <summary>
            Gets or sets the client secret associated with the application.
            Note: depending on the application manager used when creating it,
            this property may be hashed or encrypted for security reasons.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictApplicationDescriptor.DisplayName">
            <summary>
            Gets or sets the display name
            associated with the application.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictApplicationDescriptor.PostLogoutRedirectUris">
            <summary>
            Gets the logout callback URLs
            associated with the application.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictApplicationDescriptor.RedirectUris">
            <summary>
            Gets the callback URLs
            associated with the application.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictApplicationDescriptor.Type">
            <summary>
            Gets or sets the application type
            associated with the application.
            </summary>
        </member>
        <member name="T:OpenIddict.Core.OpenIddictAuthorizationDescriptor">
            <summary>
            Represents an OpenIddict authorization descriptor.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictAuthorizationDescriptor.ApplicationId">
            <summary>
            Gets or sets the application identifier associated with the authorization.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictAuthorizationDescriptor.Principal">
            <summary>
            Gets or sets the optional principal associated with the authorization.
            Note: this property is not stored by the default authorization stores.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictAuthorizationDescriptor.Properties">
            <summary>
            Gets the optional authentication properties associated with the authorization.
            Note: this property is not stored by the default authorization stores.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictAuthorizationDescriptor.Scopes">
            <summary>
            Gets the scopes associated with the authorization.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictAuthorizationDescriptor.Status">
            <summary>
            Gets or sets the status associated with the authorization.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictAuthorizationDescriptor.Subject">
            <summary>
            Gets or sets the subject associated with the authorization.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictAuthorizationDescriptor.Type">
            <summary>
            Gets or sets the type of the authorization.
            </summary>
        </member>
        <member name="T:OpenIddict.Core.OpenIddictScopeDescriptor">
            <summary>
            Represents an OpenIddict scope descriptor.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictScopeDescriptor.Description">
            <summary>
            Gets or sets the description
            associated with the scope.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictScopeDescriptor.Name">
            <summary>
            Gets or sets the unique name
            associated with the scope.
            </summary>
        </member>
        <member name="T:OpenIddict.Core.OpenIddictTokenDescriptor">
            <summary>
            Represents an OpenIddict token descriptor.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictTokenDescriptor.ApplicationId">
            <summary>
            Gets or sets the application identifier associated with the token.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictTokenDescriptor.AuthorizationId">
            <summary>
            Gets or sets the authorization identifier associated with the token.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictTokenDescriptor.CreationDate">
            <summary>
            Gets or sets the creation date associated with the token.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictTokenDescriptor.ExpirationDate">
            <summary>
            Gets or sets the expiration date associated with the token.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictTokenDescriptor.Payload">
            <summary>
            Gets or sets the payload associated with the token.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictTokenDescriptor.Principal">
            <summary>
            Gets or sets the optional principal associated with the token.
            Note: this property is not stored by the default token stores.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictTokenDescriptor.Properties">
            <summary>
            Gets the optional authentication properties associated with the token.
            Note: this property is not stored by the default token stores.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictTokenDescriptor.ReferenceId">
            <summary>
            Gets or sets the reference identifier associated with the token.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictTokenDescriptor.Status">
            <summary>
            Gets or sets the status associated with the token.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictTokenDescriptor.Subject">
            <summary>
            Gets or sets the subject associated with the token.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictTokenDescriptor.Type">
            <summary>
            Gets or sets the token type.
            </summary>
        </member>
        <member name="T:OpenIddict.Core.OpenIddictApplicationManager`1">
            <summary>
            Provides methods allowing to manage the applications stored in the store.
            </summary>
            <typeparam name="TApplication">The type of the Application entity.</typeparam>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictApplicationManager`1.Logger">
            <summary>
            Gets the logger associated with the current manager.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictApplicationManager`1.Store">
            <summary>
            Gets the store associated with the current manager.
            </summary>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.CountAsync(System.Threading.CancellationToken)">
            <summary>
            Determines the number of applications that exist in the database.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the number of applications in the database.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.CountAsync``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Threading.CancellationToken)">
            <summary>
            Determines the number of applications that match the specified query.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the number of applications that match the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.CreateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Creates a new application.
            </summary>
            <param name="application">The application to create.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the unique identifier associated with the application.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.CreateAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a new application.
            Note: the default implementation automatically hashes the client
            secret before storing it in the database, for security reasons.
            </summary>
            <param name="application">The application to create.</param>
            <param name="secret">The client secret associated with the application, if applicable.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the unique identifier associated with the application.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.CreateAsync(OpenIddict.Core.OpenIddictApplicationDescriptor,System.Threading.CancellationToken)">
            <summary>
            Creates a new application based on the specified descriptor.
            Note: the default implementation automatically hashes the client
            secret before storing it in the database, for security reasons.
            </summary>
            <param name="descriptor">The application descriptor.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the unique identifier associated with the application.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.DeleteAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Removes an existing application.
            </summary>
            <param name="application">The application to delete.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.FindByIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves an application using its unique identifier.
            </summary>
            <param name="identifier">The unique identifier associated with the application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the client application corresponding to the identifier.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.FindByClientIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves an application using its client identifier.
            </summary>
            <param name="identifier">The client identifier associated with the application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the client application corresponding to the identifier.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.FindByPostLogoutRedirectUriAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves all the applications associated with the specified post_logout_redirect_uri.
            </summary>
            <param name="address">The post_logout_redirect_uri associated with the applications.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation, whose result
            returns the client applications corresponding to the specified post_logout_redirect_uri.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.FindByRedirectUriAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves all the applications associated with the specified redirect_uri.
            </summary>
            <param name="address">The redirect_uri associated with the applications.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation, whose result
            returns the client applications corresponding to the specified redirect_uri.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.GetAsync``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns the first element.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the first element returned when executing the query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.GetAsync``2(System.Func{System.Linq.IQueryable{`0},``0,System.Linq.IQueryable{``1}},``0,System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns the first element.
            </summary>
            <typeparam name="TState">The state type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="state">The optional state.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the first element returned when executing the query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.GetClientIdAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the client identifier associated with an application.
            </summary>
            <param name="application">The application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the client identifier associated with the application.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.GetClientTypeAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the client type associated with an application.
            </summary>
            <param name="application">The application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the client type of the application (by default, "public").
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.GetDisplayNameAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the display name associated with an application.
            </summary>
            <param name="application">The application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the display name associated with the application.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.GetIdAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the unique identifier associated with an application.
            </summary>
            <param name="application">The application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the unique identifier associated with the application.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.IsConfidentialAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Determines whether an application is a confidential client.
            </summary>
            <param name="application">The application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns><c>true</c> if the application is a confidential client, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.IsHybridAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Determines whether an application is a hybrid client.
            </summary>
            <param name="application">The application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns><c>true</c> if the application is a hybrid client, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.IsPublicAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Determines whether an application is a public client.
            </summary>
            <param name="application">The application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns><c>true</c> if the application is a public client, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.ListAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns all the corresponding elements.
            </summary>
            <param name="count">The number of results to return.</param>
            <param name="offset">The number of results to skip.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns all the elements returned when executing the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.ListAsync``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns all the corresponding elements.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns all the elements returned when executing the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.ListAsync``2(System.Func{System.Linq.IQueryable{`0},``0,System.Linq.IQueryable{``1}},``0,System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns all the corresponding elements.
            </summary>
            <typeparam name="TState">The state type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="state">The optional state.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns all the elements returned when executing the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.UpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Updates an existing application.
            </summary>
            <param name="application">The application to update.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.UpdateAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Updates an existing application and replaces the existing secret.
            Note: the default implementation automatically hashes the client
            secret before storing it in the database, for security reasons.
            </summary>
            <param name="application">The application to update.</param>
            <param name="secret">The client secret associated with the application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.UpdateAsync(`0,System.Func{OpenIddict.Core.OpenIddictApplicationDescriptor,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Updates an existing application.
            </summary>
            <param name="application">The application to update.</param>
            <param name="operation">The delegate used to update the application based on the given descriptor.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.ValidateClientSecretAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Validates the client_secret associated with an application.
            </summary>
            <param name="application">The application.</param>
            <param name="secret">The secret that should be compared to the client_secret stored in the database.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.</returns>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns a boolean indicating whether the client secret was valid.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.ValidatePostLogoutRedirectUriAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Validates the specified post_logout_redirect_uri.
            </summary>
            <param name="address">The address that should be compared to the post_logout_redirect_uri stored in the database.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation, whose result
            returns a boolean indicating whether the post_logout_redirect_uri was valid.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.ValidateRedirectUriAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Validates the redirect_uri to ensure it's associated with an application.
            </summary>
            <param name="application">The application.</param>
            <param name="address">The address that should be compared to one of the redirect_uri stored in the database.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns a boolean indicating whether the redirect_uri was valid.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.PopulateAsync(`0,OpenIddict.Core.OpenIddictApplicationDescriptor,System.Threading.CancellationToken)">
            <summary>
            Populates the application using the specified descriptor.
            </summary>
            <param name="application">The application.</param>
            <param name="descriptor">The descriptor.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.ValidateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Validates the application to ensure it's in a consistent state.
            </summary>
            <param name="application">The application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.ObfuscateClientSecretAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Obfuscates the specified client secret so it can be safely stored in a database.
            By default, this method returns a complex hashed representation computed using PBKDF2.
            </summary>
            <param name="secret">The client secret.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationManager`1.ValidateClientSecretAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Validates the specified value to ensure it corresponds to the client secret.
            Note: when overriding this method, using a time-constant comparer is strongly recommended.
            </summary>
            <param name="secret">The client secret to compare to the value stored in the database.</param>
            <param name="comparand">The value stored in the database, which is usually a hashed representation of the secret.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns a boolean indicating whether the specified value was valid.
            </returns>
        </member>
        <member name="T:OpenIddict.Core.OpenIddictAuthorizationManager`1">
            <summary>
            Provides methods allowing to manage the authorizations stored in the store.
            </summary>
            <typeparam name="TAuthorization">The type of the Authorization entity.</typeparam>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictAuthorizationManager`1.Logger">
            <summary>
            Gets the logger associated with the current manager.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictAuthorizationManager`1.Store">
            <summary>
            Gets the store associated with the current manager.
            </summary>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.CountAsync(System.Threading.CancellationToken)">
            <summary>
            Determines the number of authorizations that exist in the database.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the number of authorizations in the database.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.CountAsync``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Threading.CancellationToken)">
            <summary>
            Determines the number of authorizations that match the specified query.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the number of authorizations that match the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.CreateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Creates a new authorization.
            </summary>
            <param name="authorization">The application to create.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation, whose result returns the authorization.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.CreateAsync(OpenIddict.Core.OpenIddictAuthorizationDescriptor,System.Threading.CancellationToken)">
            <summary>
            Creates a new authorization based on the specified descriptor.
            </summary>
            <param name="descriptor">The authorization descriptor.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation, whose result returns the authorization.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.DeleteAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Removes an existing authorization.
            </summary>
            <param name="authorization">The authorization to delete.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.FindAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the authorizations corresponding to the specified
            subject and associated with the application identifier.
            </summary>
            <param name="subject">The subject associated with the authorization.</param>
            <param name="client">The client associated with the authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the authorizations corresponding to the subject/client.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.FindByIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves an authorization using its unique identifier.
            </summary>
            <param name="identifier">The unique identifier associated with the authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the authorization corresponding to the identifier.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.GetApplicationIdAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the optional application identifier associated with an authorization.
            </summary>
            <param name="authorization">The authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the application identifier associated with the authorization.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.GetAsync``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns the first element.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the first element returned when executing the query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.GetAsync``2(System.Func{System.Linq.IQueryable{`0},``0,System.Linq.IQueryable{``1}},``0,System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns the first element.
            </summary>
            <typeparam name="TState">The state type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="state">The optional state.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the first element returned when executing the query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.GetIdAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the unique identifier associated with an authorization.
            </summary>
            <param name="authorization">The authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the unique identifier associated with the authorization.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.GetStatusAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the status associated with an authorization.
            </summary>
            <param name="authorization">The authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the status associated with the specified authorization.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.IsRevokedAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Determines whether a given authorization has been revoked.
            </summary>
            <param name="authorization">The authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns><c>true</c> if the authorization has been revoked, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.IsValidAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Determines whether a given authorization is valid.
            </summary>
            <param name="authorization">The authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns><c>true</c> if the authorization is valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.ListAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns all the corresponding elements.
            </summary>
            <param name="count">The number of results to return.</param>
            <param name="offset">The number of results to skip.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns all the elements returned when executing the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.ListAsync``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns all the corresponding elements.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns all the elements returned when executing the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.ListAsync``2(System.Func{System.Linq.IQueryable{`0},``0,System.Linq.IQueryable{``1}},``0,System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns all the corresponding elements.
            </summary>
            <typeparam name="TState">The state type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="state">The optional state.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns all the elements returned when executing the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.ListInvalidAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Lists the ad-hoc authorizations that are marked as invalid or have no
            valid token attached and that can be safely removed from the database.
            </summary>
            <param name="count">The number of results to return.</param>
            <param name="offset">The number of results to skip.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns all the elements returned when executing the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.RevokeAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Revokes an authorization.
            </summary>
            <param name="authorization">The authorization to revoke.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.SetApplicationIdAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the application identifier associated with an authorization.
            </summary>
            <param name="authorization">The authorization.</param>
            <param name="identifier">The unique identifier associated with the client application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.UpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Updates an existing authorization.
            </summary>
            <param name="authorization">The authorization to update.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.UpdateAsync(`0,System.Func{OpenIddict.Core.OpenIddictAuthorizationDescriptor,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Updates an existing authorization.
            </summary>
            <param name="authorization">The authorization to update.</param>
            <param name="operation">The delegate used to update the authorization based on the given descriptor.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.PopulateAsync(`0,OpenIddict.Core.OpenIddictAuthorizationDescriptor,System.Threading.CancellationToken)">
            <summary>
            Populates the authorization using the specified descriptor.
            </summary>
            <param name="authorization">The authorization.</param>
            <param name="descriptor">The descriptor.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationManager`1.ValidateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Validates the authorization to ensure it's in a consistent state.
            </summary>
            <param name="authorization">The authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="T:OpenIddict.Core.OpenIddictScopeManager`1">
            <summary>
            Provides methods allowing to manage the scopes stored in the store.
            </summary>
            <typeparam name="TScope">The type of the Scope entity.</typeparam>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictScopeManager`1.Logger">
            <summary>
            Gets the logger associated with the current manager.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictScopeManager`1.Store">
            <summary>
            Gets the store associated with the current manager.
            </summary>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.CountAsync(System.Threading.CancellationToken)">
            <summary>
            Determines the number of scopes that exist in the database.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the number of scopes in the database.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.CountAsync``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Threading.CancellationToken)">
            <summary>
            Determines the number of scopes that match the specified query.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the number of scopes that match the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.CreateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Creates a new scope.
            </summary>
            <param name="scope">The scope to create.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation, whose result returns the scope.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.CreateAsync(OpenIddict.Core.OpenIddictScopeDescriptor,System.Threading.CancellationToken)">
            <summary>
            Creates a new scope based on the specified descriptor.
            </summary>
            <param name="descriptor">The scope descriptor.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation, whose result returns the scope.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.DeleteAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Removes an existing scope.
            </summary>
            <param name="scope">The scope to delete.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.GetAsync``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns the first element.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the first element returned when executing the query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.GetAsync``2(System.Func{System.Linq.IQueryable{`0},``0,System.Linq.IQueryable{``1}},``0,System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns the first element.
            </summary>
            <typeparam name="TState">The state type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="state">The optional state.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the first element returned when executing the query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.ListAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns all the corresponding elements.
            </summary>
            <param name="count">The number of results to return.</param>
            <param name="offset">The number of results to skip.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns all the elements returned when executing the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.ListAsync``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns all the corresponding elements.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns all the elements returned when executing the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.ListAsync``2(System.Func{System.Linq.IQueryable{`0},``0,System.Linq.IQueryable{``1}},``0,System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns all the corresponding elements.
            </summary>
            <typeparam name="TState">The state type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="state">The optional state.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns all the elements returned when executing the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.UpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Updates an existing scope.
            </summary>
            <param name="scope">The scope to update.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.UpdateAsync(`0,System.Func{OpenIddict.Core.OpenIddictScopeDescriptor,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Updates an existing scope.
            </summary>
            <param name="scope">The scope to update.</param>
            <param name="operation">The delegate used to update the scope based on the given descriptor.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeManager`1.PopulateAsync(`0,OpenIddict.Core.OpenIddictScopeDescriptor,System.Threading.CancellationToken)">
            <summary>
            Populates the scope using the specified descriptor.
            </summary>
            <param name="scope">The scope.</param>
            <param name="descriptor">The descriptor.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="T:OpenIddict.Core.OpenIddictTokenManager`1">
            <summary>
            Provides methods allowing to manage the tokens stored in the store.
            </summary>
            <typeparam name="TToken">The type of the Token entity.</typeparam>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictTokenManager`1.Logger">
            <summary>
            Gets the logger associated with the current manager.
            </summary>
        </member>
        <member name="P:OpenIddict.Core.OpenIddictTokenManager`1.Store">
            <summary>
            Gets the store associated with the current manager.
            </summary>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.CountAsync(System.Threading.CancellationToken)">
            <summary>
            Determines the number of tokens that exist in the database.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the number of tokens in the database.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.CountAsync``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Threading.CancellationToken)">
            <summary>
            Determines the number of tokens that match the specified query.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the number of tokens that match the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.CreateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Creates a new token.
            </summary>
            <param name="token">The token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation, whose result returns the token.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.CreateAsync(OpenIddict.Core.OpenIddictTokenDescriptor,System.Threading.CancellationToken)">
            <summary>
            Creates a new token based on the specified descriptor.
            </summary>
            <param name="descriptor">The token descriptor.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation, whose result returns the token.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.DeleteAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Removes an existing token.
            </summary>
            <param name="token">The token to delete.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.ExtendAsync(`0,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary>
            Extends the specified token by replacing its expiration date.
            </summary>
            <param name="token">The token.</param>
            <param name="date">The date on which the token will no longer be considered valid.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.FindByApplicationIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the list of tokens corresponding to the specified application identifier.
            </summary>
            <param name="identifier">The application identifier associated with the tokens.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the tokens corresponding to the specified application.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.FindByAuthorizationIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the list of tokens corresponding to the specified authorization identifier.
            </summary>
            <param name="identifier">The authorization identifier associated with the tokens.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the tokens corresponding to the specified authorization.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.FindByReferenceIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the list of tokens corresponding to the specified reference identifier.
            Note: the reference identifier may be hashed or encrypted for security reasons.
            </summary>
            <param name="identifier">The reference identifier associated with the tokens.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the tokens corresponding to the specified reference identifier.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.FindByIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves a token using its unique identifier.
            </summary>
            <param name="identifier">The unique identifier associated with the token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the token corresponding to the unique identifier.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.FindBySubjectAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the list of tokens corresponding to the specified subject.
            </summary>
            <param name="subject">The subject associated with the tokens.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the tokens corresponding to the specified subject.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.GetApplicationIdAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the optional application identifier associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the application identifier associated with the token.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.GetAsync``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns the first element.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the first element returned when executing the query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.GetAsync``2(System.Func{System.Linq.IQueryable{`0},``0,System.Linq.IQueryable{``1}},``0,System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns the first element.
            </summary>
            <typeparam name="TState">The state type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="state">The optional state.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the first element returned when executing the query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.GetAuthorizationIdAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the optional authorization identifier associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the authorization identifier associated with the token.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.GetCreationDateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the creation date associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the creation date associated with the specified token.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.GetExpirationDateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the expiration date associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the expiration date associated with the specified token.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.GetReferenceIdAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the reference identifier associated with a token.
            Note: depending on the manager used to create the token,
            the reference identifier may be hashed for security reasons.
            </summary>
            <param name="token">The token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the reference identifier associated with the specified token.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.GetIdAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the unique identifier associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the unique identifier associated with the token.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.GetPayloadAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the payload associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the payload associated with the specified token.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.GetStatusAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the status associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the status associated with the specified token.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.IsRedeemedAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Determines whether a given token has already been redemeed.
            </summary>
            <param name="token">The token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns><c>true</c> if the token has already been redemeed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.IsRevokedAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Determines whether a given token has been revoked.
            </summary>
            <param name="token">The token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns><c>true</c> if the token has been revoked, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.IsValidAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Determines whether a given token is valid.
            </summary>
            <param name="token">The token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns><c>true</c> if the token is valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.ListAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns all the corresponding elements.
            </summary>
            <param name="count">The number of results to return.</param>
            <param name="offset">The number of results to skip.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns all the elements returned when executing the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.ListAsync``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns all the corresponding elements.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns all the elements returned when executing the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.ListAsync``2(System.Func{System.Linq.IQueryable{`0},``0,System.Linq.IQueryable{``1}},``0,System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns all the corresponding elements.
            </summary>
            <typeparam name="TState">The state type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="state">The optional state.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns all the elements returned when executing the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.ListInvalidAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Lists the tokens that are marked as expired or invalid
            and that can be safely removed from the database.
            </summary>
            <param name="count">The number of results to return.</param>
            <param name="offset">The number of results to skip.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns all the elements returned when executing the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.ObfuscateReferenceIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Obfuscates the specified reference identifier so it can be safely stored in a database.
            By default, this method returns a simple hashed representation computed using SHA256.
            </summary>
            <param name="identifier">The client identifier.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.RedeemAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Redeems a token.
            </summary>
            <param name="token">The token to redeem.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.RevokeAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Revokes a token.
            </summary>
            <param name="token">The token to revoke.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.SetApplicationIdAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the application identifier associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="identifier">The unique identifier associated with the client application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.SetAuthorizationIdAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the authorization identifier associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="identifier">The unique identifier associated with the authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.UpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Updates an existing token.
            </summary>
            <param name="token">The token to update.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.UpdateAsync(`0,System.Func{OpenIddict.Core.OpenIddictTokenDescriptor,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Updates an existing token.
            </summary>
            <param name="token">The token to update.</param>
            <param name="operation">The delegate used to update the token based on the given descriptor.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.PopulateAsync(`0,OpenIddict.Core.OpenIddictTokenDescriptor,System.Threading.CancellationToken)">
            <summary>
            Populates the token using the specified descriptor.
            </summary>
            <param name="token">The token.</param>
            <param name="descriptor">The descriptor.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenManager`1.ValidateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Validates the token to ensure it's in a consistent state.
            </summary>
            <param name="token">The token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="T:OpenIddict.Core.IOpenIddictApplicationStore`1">
            <summary>
            Provides methods allowing to manage the applications stored in a database.
            </summary>
            <typeparam name="TApplication">The type of the Application entity.</typeparam>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictApplicationStore`1.CountAsync(System.Threading.CancellationToken)">
            <summary>
            Determines the number of applications that exist in the database.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the number of applications in the database.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictApplicationStore`1.CountAsync``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Threading.CancellationToken)">
            <summary>
            Determines the number of applications that match the specified query.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the number of applications that match the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictApplicationStore`1.CreateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Creates a new application.
            </summary>
            <param name="application">The application to create.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation, whose result returns the application.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictApplicationStore`1.DeleteAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Removes an existing application.
            </summary>
            <param name="application">The application to delete.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictApplicationStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves an application using its unique identifier.
            </summary>
            <param name="identifier">The unique identifier associated with the application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the client application corresponding to the identifier.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictApplicationStore`1.FindByClientIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves an application using its client identifier.
            </summary>
            <param name="identifier">The client identifier associated with the application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the client application corresponding to the identifier.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictApplicationStore`1.FindByPostLogoutRedirectUriAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves all the applications associated with the specified post_logout_redirect_uri.
            </summary>
            <param name="address">The post_logout_redirect_uri associated with the applications.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation, whose result
            returns the client applications corresponding to the specified post_logout_redirect_uri.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictApplicationStore`1.FindByRedirectUriAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves all the applications associated with the specified redirect_uri.
            </summary>
            <param name="address">The redirect_uri associated with the applications.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation, whose result
            returns the client applications corresponding to the specified redirect_uri.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictApplicationStore`1.GetAsync``2(System.Func{System.Linq.IQueryable{`0},``0,System.Linq.IQueryable{``1}},``0,System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns the first element.
            </summary>
            <typeparam name="TState">The state type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="state">The optional state.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the first element returned when executing the query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictApplicationStore`1.GetClientIdAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the client identifier associated with an application.
            </summary>
            <param name="application">The application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the client identifier associated with the application.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictApplicationStore`1.GetClientSecretAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the client secret associated with an application.
            Note: depending on the manager used to create the application,
            the client secret may be hashed for security reasons.
            </summary>
            <param name="application">The application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the client secret associated with the application.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictApplicationStore`1.GetClientTypeAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the client type associated with an application.
            </summary>
            <param name="application">The application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the client type of the application (by default, "public").
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictApplicationStore`1.GetDisplayNameAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the display name associated with an application.
            </summary>
            <param name="application">The application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the display name associated with the application.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictApplicationStore`1.GetIdAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the unique identifier associated with an application.
            </summary>
            <param name="application">The application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the unique identifier associated with the application.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictApplicationStore`1.GetPostLogoutRedirectUrisAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the logout callback addresses associated with an application.
            </summary>
            <param name="application">The application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation, whose
            result returns all the post_logout_redirect_uri associated with the application.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictApplicationStore`1.GetRedirectUrisAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the callback addresses associated with an application.
            </summary>
            <param name="application">The application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns all the redirect_uri associated with the application.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictApplicationStore`1.InstantiateAsync(System.Threading.CancellationToken)">
            <summary>
            Instantiates a new application.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation, whose result
            returns the instantiated application, that can be persisted in the database.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictApplicationStore`1.ListAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns all the corresponding elements.
            </summary>
            <param name="count">The number of results to return.</param>
            <param name="offset">The number of results to skip.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns all the elements returned when executing the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictApplicationStore`1.ListAsync``2(System.Func{System.Linq.IQueryable{`0},``0,System.Linq.IQueryable{``1}},``0,System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns all the corresponding elements.
            </summary>
            <typeparam name="TState">The state type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="state">The optional state.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns all the elements returned when executing the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictApplicationStore`1.SetClientIdAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the client identifier associated with an application.
            </summary>
            <param name="application">The application.</param>
            <param name="identifier">The client identifier associated with the application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictApplicationStore`1.SetClientSecretAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the client secret associated with an application.
            Note: depending on the manager used to create the application,
            the client secret may be hashed for security reasons.
            </summary>
            <param name="application">The application.</param>
            <param name="secret">The client secret associated with the application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictApplicationStore`1.SetClientTypeAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the client type associated with an application.
            </summary>
            <param name="application">The application.</param>
            <param name="type">The client type associated with the application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictApplicationStore`1.SetDisplayNameAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the display name associated with an application.
            </summary>
            <param name="application">The application.</param>
            <param name="name">The display name associated with the application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictApplicationStore`1.SetPostLogoutRedirectUrisAsync(`0,System.Collections.Immutable.ImmutableArray{System.String},System.Threading.CancellationToken)">
            <summary>
            Sets the logout callback addresses associated with an application.
            </summary>
            <param name="application">The application.</param>
            <param name="addresses">The logout callback addresses associated with the application </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictApplicationStore`1.SetRedirectUrisAsync(`0,System.Collections.Immutable.ImmutableArray{System.String},System.Threading.CancellationToken)">
            <summary>
            Sets the callback addresses associated with an application.
            </summary>
            <param name="application">The application.</param>
            <param name="addresses">The callback addresses associated with the application </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictApplicationStore`1.UpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Updates an existing application.
            </summary>
            <param name="application">The application to update.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="T:OpenIddict.Core.IOpenIddictAuthorizationStore`1">
            <summary>
            Provides methods allowing to manage the authorizations stored in a database.
            </summary>
            <typeparam name="TAuthorization">The type of the Authorization entity.</typeparam>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictAuthorizationStore`1.CountAsync(System.Threading.CancellationToken)">
            <summary>
            Determines the number of authorizations that exist in the database.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the number of authorizations in the database.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictAuthorizationStore`1.CountAsync``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Threading.CancellationToken)">
            <summary>
            Determines the number of authorizations that match the specified query.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the number of authorizations that match the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictAuthorizationStore`1.CreateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Creates a new authorization.
            </summary>
            <param name="authorization">The authorization to create.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation, whose result returns the authorization.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictAuthorizationStore`1.DeleteAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Removes an existing authorization.
            </summary>
            <param name="authorization">The authorization to delete.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictAuthorizationStore`1.FindAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the authorizations corresponding to the specified
            subject and associated with the application identifier.
            </summary>
            <param name="subject">The subject associated with the authorization.</param>
            <param name="client">The client associated with the authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the authorizations corresponding to the subject/client.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictAuthorizationStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves an authorization using its unique identifier.
            </summary>
            <param name="identifier">The unique identifier associated with the authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the authorization corresponding to the identifier.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictAuthorizationStore`1.GetApplicationIdAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the optional application identifier associated with an authorization.
            </summary>
            <param name="authorization">The authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the application identifier associated with the authorization.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictAuthorizationStore`1.GetAsync``2(System.Func{System.Linq.IQueryable{`0},``0,System.Linq.IQueryable{``1}},``0,System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns the first element.
            </summary>
            <typeparam name="TState">The state type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="state">The optional state.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the first element returned when executing the query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictAuthorizationStore`1.GetIdAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the unique identifier associated with an authorization.
            </summary>
            <param name="authorization">The authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the unique identifier associated with the authorization.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictAuthorizationStore`1.GetScopesAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the scopes associated with an authorization.
            </summary>
            <param name="authorization">The authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the scopes associated with the specified authorization.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictAuthorizationStore`1.GetStatusAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the status associated with an authorization.
            </summary>
            <param name="authorization">The authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the status associated with the specified authorization.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictAuthorizationStore`1.GetSubjectAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the subject associated with an authorization.
            </summary>
            <param name="authorization">The authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the subject associated with the specified authorization.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictAuthorizationStore`1.GetTypeAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the type associated with an authorization.
            </summary>
            <param name="authorization">The authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the type associated with the specified authorization.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictAuthorizationStore`1.InstantiateAsync(System.Threading.CancellationToken)">
            <summary>
            Instantiates a new authorization.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation, whose result
            returns the instantiated authorization, that can be persisted in the database.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictAuthorizationStore`1.ListAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns all the corresponding elements.
            </summary>
            <param name="count">The number of results to return.</param>
            <param name="offset">The number of results to skip.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns all the elements returned when executing the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictAuthorizationStore`1.ListAsync``2(System.Func{System.Linq.IQueryable{`0},``0,System.Linq.IQueryable{``1}},``0,System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns all the corresponding elements.
            </summary>
            <typeparam name="TState">The state type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="state">The optional state.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns all the elements returned when executing the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictAuthorizationStore`1.ListInvalidAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Lists the ad-hoc authorizations that are marked as invalid or have no
            valid token attached and that can be safely removed from the database.
            </summary>
            <param name="count">The number of results to return.</param>
            <param name="offset">The number of results to skip.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns all the elements returned when executing the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictAuthorizationStore`1.SetApplicationIdAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the application identifier associated with an authorization.
            </summary>
            <param name="authorization">The authorization.</param>
            <param name="identifier">The unique identifier associated with the client application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictAuthorizationStore`1.SetScopesAsync(`0,System.Collections.Immutable.ImmutableArray{System.String},System.Threading.CancellationToken)">
            <summary>
            Sets the scopes associated with an authorization.
            </summary>
            <param name="authorization">The authorization.</param>
            <param name="scopes">The scopes associated with the authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictAuthorizationStore`1.SetStatusAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the status associated with an authorization.
            </summary>
            <param name="authorization">The authorization.</param>
            <param name="status">The status associated with the authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictAuthorizationStore`1.SetSubjectAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the subject associated with an authorization.
            </summary>
            <param name="authorization">The authorization.</param>
            <param name="subject">The subject associated with the authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictAuthorizationStore`1.SetTypeAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the type associated with an authorization.
            </summary>
            <param name="authorization">The authorization.</param>
            <param name="type">The type associated with the authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictAuthorizationStore`1.UpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Updates an existing authorization.
            </summary>
            <param name="authorization">The authorization to update.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="T:OpenIddict.Core.IOpenIddictScopeStore`1">
            <summary>
            Provides methods allowing to manage the scopes stored in a database.
            </summary>
            <typeparam name="TScope">The type of the Scope entity.</typeparam>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictScopeStore`1.CountAsync(System.Threading.CancellationToken)">
            <summary>
            Determines the number of scopes that exist in the database.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the number of scopes in the database.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictScopeStore`1.CountAsync``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Threading.CancellationToken)">
            <summary>
            Determines the number of scopes that match the specified query.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the number of scopes that match the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictScopeStore`1.CreateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Creates a new scope.
            </summary>
            <param name="scope">The scope to create.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation, whose result returns the scope.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictScopeStore`1.DeleteAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Removes an existing scope.
            </summary>
            <param name="scope">The scope to delete.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictScopeStore`1.GetAsync``2(System.Func{System.Linq.IQueryable{`0},``0,System.Linq.IQueryable{``1}},``0,System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns the first element.
            </summary>
            <typeparam name="TState">The state type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="state">The optional state.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the first element returned when executing the query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictScopeStore`1.GetDescriptionAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the description associated with a scope.
            </summary>
            <param name="scope">The scope.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the description associated with the specified scope.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictScopeStore`1.GetNameAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the name associated with a scope.
            </summary>
            <param name="scope">The scope.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the name associated with the specified scope.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictScopeStore`1.InstantiateAsync(System.Threading.CancellationToken)">
            <summary>
            Instantiates a new scope.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the instantiated scope, that can be persisted in the database.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictScopeStore`1.ListAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns all the corresponding elements.
            </summary>
            <param name="count">The number of results to return.</param>
            <param name="offset">The number of results to skip.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns all the elements returned when executing the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictScopeStore`1.ListAsync``2(System.Func{System.Linq.IQueryable{`0},``0,System.Linq.IQueryable{``1}},``0,System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns all the corresponding elements.
            </summary>
            <typeparam name="TState">The state type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="state">The optional state.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns all the elements returned when executing the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictScopeStore`1.SetDescriptionAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the description associated with a scope.
            </summary>
            <param name="scope">The scope.</param>
            <param name="description">The description associated with the authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictScopeStore`1.SetNameAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the name associated with a scope.
            </summary>
            <param name="scope">The scope.</param>
            <param name="name">The name associated with the authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictScopeStore`1.UpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Updates an existing scope.
            </summary>
            <param name="scope">The scope to update.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="T:OpenIddict.Core.IOpenIddictTokenStore`1">
            <summary>
            Provides methods allowing to manage the tokens stored in a database.
            </summary>
            <typeparam name="TToken">The type of the Token entity.</typeparam>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictTokenStore`1.CountAsync(System.Threading.CancellationToken)">
            <summary>
            Determines the number of tokens that exist in the database.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the number of applications in the database.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictTokenStore`1.CountAsync``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Threading.CancellationToken)">
            <summary>
            Determines the number of tokens that match the specified query.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the number of tokens that match the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictTokenStore`1.CreateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Creates a new token.
            </summary>
            <param name="token">The token to create.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation, whose result returns the token.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictTokenStore`1.DeleteAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Removes a token.
            </summary>
            <param name="token">The token to delete.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.</returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictTokenStore`1.FindByApplicationIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the list of tokens corresponding to the specified application identifier.
            </summary>
            <param name="identifier">The application identifier associated with the tokens.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the tokens corresponding to the specified application.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictTokenStore`1.FindByAuthorizationIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the list of tokens corresponding to the specified authorization identifier.
            </summary>
            <param name="identifier">The authorization identifier associated with the tokens.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the tokens corresponding to the specified authorization.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictTokenStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves a token using its unique identifier.
            </summary>
            <param name="identifier">The unique identifier associated with the token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the token corresponding to the unique identifier.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictTokenStore`1.FindByReferenceIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the list of tokens corresponding to the specified reference identifier.
            Note: the reference identifier may be hashed or encrypted for security reasons.
            </summary>
            <param name="identifier">The reference identifier associated with the tokens.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the tokens corresponding to the specified reference identifier.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictTokenStore`1.FindBySubjectAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the list of tokens corresponding to the specified subject.
            </summary>
            <param name="subject">The subject associated with the tokens.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the tokens corresponding to the specified subject.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictTokenStore`1.GetApplicationIdAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the optional application identifier associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the application identifier associated with the token.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictTokenStore`1.GetAsync``2(System.Func{System.Linq.IQueryable{`0},``0,System.Linq.IQueryable{``1}},``0,System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns the first element.
            </summary>
            <typeparam name="TState">The state type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="state">The optional state.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the first element returned when executing the query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictTokenStore`1.GetAuthorizationIdAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the optional authorization identifier associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the authorization identifier associated with the token.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictTokenStore`1.GetCreationDateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the creation date associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the creation date associated with the specified token.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictTokenStore`1.GetExpirationDateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the expiration date associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the expiration date associated with the specified token.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictTokenStore`1.GetIdAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the unique identifier associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the unique identifier associated with the token.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictTokenStore`1.GetPayloadAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the payload associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the payload associated with the specified token.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictTokenStore`1.GetReferenceIdAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the reference identifier associated with a token.
            Note: depending on the manager used to create the token,
            the reference identifier may be hashed for security reasons.
            </summary>
            <param name="token">The token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the reference identifier associated with the specified token.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictTokenStore`1.GetStatusAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the status associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the status associated with the specified token.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictTokenStore`1.GetSubjectAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the subject associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the subject associated with the specified token.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictTokenStore`1.GetTokenTypeAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the token type associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the token type associated with the specified token.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictTokenStore`1.InstantiateAsync(System.Threading.CancellationToken)">
            <summary>
            Instantiates a new token.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the instantiated token, that can be persisted in the database.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictTokenStore`1.ListAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns all the corresponding elements.
            </summary>
            <param name="count">The number of results to return.</param>
            <param name="offset">The number of results to skip.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns all the elements returned when executing the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictTokenStore`1.ListAsync``2(System.Func{System.Linq.IQueryable{`0},``0,System.Linq.IQueryable{``1}},``0,System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns all the corresponding elements.
            </summary>
            <typeparam name="TState">The state type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="state">The optional state.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns all the elements returned when executing the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictTokenStore`1.ListInvalidAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Lists the tokens that are marked as expired or invalid
            and that can be safely removed from the database.
            </summary>
            <param name="count">The number of results to return.</param>
            <param name="offset">The number of results to skip.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns all the elements returned when executing the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictTokenStore`1.SetApplicationIdAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the application identifier associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="identifier">The unique identifier associated with the token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictTokenStore`1.SetAuthorizationIdAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the authorization identifier associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="identifier">The unique identifier associated with the token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictTokenStore`1.SetCreationDateAsync(`0,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary>
            Sets the creation date associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="date">The creation date.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictTokenStore`1.SetExpirationDateAsync(`0,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary>
            Sets the expiration date associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="date">The expiration date.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictTokenStore`1.SetPayloadAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the payload associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="payload">The payload associated with the token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictTokenStore`1.SetReferenceIdAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the reference identifier associated with a token.
            Note: depending on the manager used to create the token,
            the reference identifier may be hashed for security reasons.
            </summary>
            <param name="token">The token.</param>
            <param name="identifier">The reference identifier associated with the token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictTokenStore`1.SetStatusAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the status associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="status">The status associated with the authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictTokenStore`1.SetSubjectAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the subject associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="subject">The subject associated with the token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictTokenStore`1.SetTokenTypeAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the token type associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="type">The token type associated with the token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.IOpenIddictTokenStore`1.UpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Updates an existing token.
            </summary>
            <param name="token">The token to update.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="T:OpenIddict.Core.OpenIddictApplicationStore`4">
            <summary>
            Provides methods allowing to manage the applications stored in a database.
            Note: this base class can only be used with the default OpenIddict entities.
            </summary>
            <typeparam name="TApplication">The type of the Application entity.</typeparam>
            <typeparam name="TAuthorization">The type of the Authorization entity.</typeparam>
            <typeparam name="TToken">The type of the Token entity.</typeparam>
            <typeparam name="TKey">The type of the entity primary keys.</typeparam>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationStore`4.CountAsync(System.Threading.CancellationToken)">
            <summary>
            Determines the number of applications that exist in the database.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the number of applications in the database.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationStore`4.CountAsync``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Threading.CancellationToken)">
            <summary>
            Determines the number of applications that match the specified query.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the number of applications that match the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationStore`4.CreateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Creates a new application.
            </summary>
            <param name="application">The application to create.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation, whose result returns the application.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationStore`4.DeleteAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Removes an existing application.
            </summary>
            <param name="application">The application to delete.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationStore`4.FindByIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves an application using its unique identifier.
            </summary>
            <param name="identifier">The unique identifier associated with the application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the client application corresponding to the identifier.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationStore`4.FindByClientIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves an application using its client identifier.
            </summary>
            <param name="identifier">The client identifier associated with the application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the client application corresponding to the identifier.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationStore`4.FindByPostLogoutRedirectUriAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves all the applications associated with the specified post_logout_redirect_uri.
            </summary>
            <param name="address">The post_logout_redirect_uri associated with the applications.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation, whose result
            returns the client applications corresponding to the specified post_logout_redirect_uri.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationStore`4.FindByRedirectUriAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves all the applications associated with the specified redirect_uri.
            </summary>
            <param name="address">The redirect_uri associated with the applications.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation, whose result
            returns the client applications corresponding to the specified redirect_uri.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationStore`4.GetAsync``2(System.Func{System.Linq.IQueryable{`0},``0,System.Linq.IQueryable{``1}},``0,System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns the first element.
            </summary>
            <typeparam name="TState">The state type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="state">The optional state.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the first element returned when executing the query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationStore`4.GetClientIdAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the client identifier associated with an application.
            </summary>
            <param name="application">The application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the client identifier associated with the application.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationStore`4.GetClientSecretAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the client secret associated with an application.
            Note: depending on the manager used to create the application,
            the client secret may be hashed for security reasons.
            </summary>
            <param name="application">The application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the client secret associated with the application.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationStore`4.GetClientTypeAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the client type associated with an application.
            </summary>
            <param name="application">The application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the client type of the application (by default, "public").
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationStore`4.GetDisplayNameAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the display name associated with an application.
            </summary>
            <param name="application">The application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the display name associated with the application.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationStore`4.GetIdAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the unique identifier associated with an application.
            </summary>
            <param name="application">The application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the unique identifier associated with the application.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationStore`4.GetPostLogoutRedirectUrisAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the logout callback addresses associated with an application.
            </summary>
            <param name="application">The application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation, whose
            result returns all the post_logout_redirect_uri associated with the application.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationStore`4.GetRedirectUrisAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the callback addresses associated with an application.
            </summary>
            <param name="application">The application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns all the redirect_uri associated with the application.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationStore`4.InstantiateAsync(System.Threading.CancellationToken)">
            <summary>
            Instantiates a new application.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation, whose result
            returns the instantiated application, that can be persisted in the database.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationStore`4.ListAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns all the corresponding elements.
            </summary>
            <param name="count">The number of results to return.</param>
            <param name="offset">The number of results to skip.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns all the elements returned when executing the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationStore`4.ListAsync``2(System.Func{System.Linq.IQueryable{`0},``0,System.Linq.IQueryable{``1}},``0,System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns all the corresponding elements.
            </summary>
            <typeparam name="TState">The state type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="state">The optional state.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns all the elements returned when executing the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationStore`4.SetClientIdAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the client identifier associated with an application.
            </summary>
            <param name="application">The application.</param>
            <param name="identifier">The client identifier associated with the application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationStore`4.SetClientSecretAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the client secret associated with an application.
            Note: depending on the manager used to create the application,
            the client secret may be hashed for security reasons.
            </summary>
            <param name="application">The application.</param>
            <param name="secret">The client secret associated with the application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationStore`4.SetClientTypeAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the client type associated with an application.
            </summary>
            <param name="application">The application.</param>
            <param name="type">The client type associated with the application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationStore`4.SetDisplayNameAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the display name associated with an application.
            </summary>
            <param name="application">The application.</param>
            <param name="name">The display name associated with the application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationStore`4.SetPostLogoutRedirectUrisAsync(`0,System.Collections.Immutable.ImmutableArray{System.String},System.Threading.CancellationToken)">
            <summary>
            Sets the logout callback addresses associated with an application.
            </summary>
            <param name="application">The application.</param>
            <param name="addresses">The logout callback addresses associated with the application </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationStore`4.SetRedirectUrisAsync(`0,System.Collections.Immutable.ImmutableArray{System.String},System.Threading.CancellationToken)">
            <summary>
            Sets the callback addresses associated with an application.
            </summary>
            <param name="application">The application.</param>
            <param name="addresses">The callback addresses associated with the application </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationStore`4.UpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Updates an existing application.
            </summary>
            <param name="application">The application to update.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationStore`4.ConvertIdentifierFromString(System.String)">
            <summary>
            Converts the provided identifier to a strongly typed key object.
            </summary>
            <param name="identifier">The identifier to convert.</param>
            <returns>An instance of <typeparamref name="TKey"/> representing the provided identifier.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictApplicationStore`4.ConvertIdentifierToString(`3)">
            <summary>
            Converts the provided identifier to its string representation.
            </summary>
            <param name="identifier">The identifier to convert.</param>
            <returns>A <see cref="T:System.String"/> representation of the provided identifier.</returns>
        </member>
        <member name="T:OpenIddict.Core.OpenIddictAuthorizationStore`4">
            <summary>
            Provides methods allowing to manage the authorizations stored in a database.
            Note: this base class can only be used with the default OpenIddict entities.
            </summary>
            <typeparam name="TAuthorization">The type of the Authorization entity.</typeparam>
            <typeparam name="TApplication">The type of the Application entity.</typeparam>
            <typeparam name="TToken">The type of the Token entity.</typeparam>
            <typeparam name="TKey">The type of the entity primary keys.</typeparam>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationStore`4.CountAsync(System.Threading.CancellationToken)">
            <summary>
            Determines the number of authorizations that exist in the database.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the number of authorizations in the database.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationStore`4.CountAsync``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Threading.CancellationToken)">
            <summary>
            Determines the number of authorizations that match the specified query.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the number of authorizations that match the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationStore`4.CreateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Creates a new authorization.
            </summary>
            <param name="authorization">The authorization to create.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation, whose result returns the authorization.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationStore`4.DeleteAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Removes an existing authorization.
            </summary>
            <param name="authorization">The authorization to delete.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationStore`4.FindAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the authorizations corresponding to the specified
            subject and associated with the application identifier.
            </summary>
            <param name="subject">The subject associated with the authorization.</param>
            <param name="client">The client associated with the authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the authorizations corresponding to the subject/client.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationStore`4.FindByIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves an authorization using its unique identifier.
            </summary>
            <param name="identifier">The unique identifier associated with the authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the authorization corresponding to the identifier.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationStore`4.GetApplicationIdAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the optional application identifier associated with an authorization.
            </summary>
            <param name="authorization">The authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the application identifier associated with the authorization.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationStore`4.GetAsync``2(System.Func{System.Linq.IQueryable{`0},``0,System.Linq.IQueryable{``1}},``0,System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns the first element.
            </summary>
            <typeparam name="TState">The state type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="state">The optional state.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the first element returned when executing the query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationStore`4.GetIdAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the unique identifier associated with an authorization.
            </summary>
            <param name="authorization">The authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the unique identifier associated with the authorization.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationStore`4.GetScopesAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the scopes associated with an authorization.
            </summary>
            <param name="authorization">The authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the scopes associated with the specified authorization.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationStore`4.GetStatusAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the status associated with an authorization.
            </summary>
            <param name="authorization">The authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the status associated with the specified authorization.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationStore`4.GetSubjectAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the subject associated with an authorization.
            </summary>
            <param name="authorization">The authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the subject associated with the specified authorization.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationStore`4.GetTypeAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the type associated with an authorization.
            </summary>
            <param name="authorization">The authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the type associated with the specified authorization.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationStore`4.InstantiateAsync(System.Threading.CancellationToken)">
            <summary>
            Instantiates a new authorization.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation, whose result
            returns the instantiated authorization, that can be persisted in the database.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationStore`4.ListAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns all the corresponding elements.
            </summary>
            <param name="count">The number of results to return.</param>
            <param name="offset">The number of results to skip.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns all the elements returned when executing the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationStore`4.ListAsync``2(System.Func{System.Linq.IQueryable{`0},``0,System.Linq.IQueryable{``1}},``0,System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns all the corresponding elements.
            </summary>
            <typeparam name="TState">The state type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="state">The optional state.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns all the elements returned when executing the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationStore`4.ListInvalidAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Lists the ad-hoc authorizations that are marked as invalid or have no
            valid token attached and that can be safely removed from the database.
            </summary>
            <param name="count">The number of results to return.</param>
            <param name="offset">The number of results to skip.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns all the elements returned when executing the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationStore`4.SetApplicationIdAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the application identifier associated with an authorization.
            </summary>
            <param name="authorization">The authorization.</param>
            <param name="identifier">The unique identifier associated with the client application.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationStore`4.SetScopesAsync(`0,System.Collections.Immutable.ImmutableArray{System.String},System.Threading.CancellationToken)">
            <summary>
            Sets the scopes associated with an authorization.
            </summary>
            <param name="authorization">The authorization.</param>
            <param name="scopes">The scopes associated with the authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationStore`4.SetStatusAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the status associated with an authorization.
            </summary>
            <param name="authorization">The authorization.</param>
            <param name="status">The status associated with the authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationStore`4.SetSubjectAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the subject associated with an authorization.
            </summary>
            <param name="authorization">The authorization.</param>
            <param name="subject">The subject associated with the authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationStore`4.SetTypeAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the type associated with an authorization.
            </summary>
            <param name="authorization">The authorization.</param>
            <param name="type">The type associated with the authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationStore`4.UpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Updates an existing authorization.
            </summary>
            <param name="authorization">The authorization to update.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationStore`4.ConvertIdentifierFromString(System.String)">
            <summary>
            Converts the provided identifier to a strongly typed key object.
            </summary>
            <param name="identifier">The identifier to convert.</param>
            <returns>An instance of <typeparamref name="TKey"/> representing the provided identifier.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictAuthorizationStore`4.ConvertIdentifierToString(`3)">
            <summary>
            Converts the provided identifier to its string representation.
            </summary>
            <param name="identifier">The identifier to convert.</param>
            <returns>A <see cref="T:System.String"/> representation of the provided identifier.</returns>
        </member>
        <member name="T:OpenIddict.Core.OpenIddictScopeStore`2">
            <summary>
            Provides methods allowing to manage the scopes stored in a database.
            Note: this base class can only be used with the default OpenIddict entities.
            </summary>
            <typeparam name="TScope">The type of the Scope entity.</typeparam>
            <typeparam name="TKey">The type of the entity primary keys.</typeparam>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeStore`2.CountAsync(System.Threading.CancellationToken)">
            <summary>
            Determines the number of scopes that exist in the database.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the number of scopes in the database.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeStore`2.CountAsync``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Threading.CancellationToken)">
            <summary>
            Determines the number of scopes that match the specified query.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the number of scopes that match the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeStore`2.CreateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Creates a new scope.
            </summary>
            <param name="scope">The scope to create.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation, whose result returns the scope.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeStore`2.DeleteAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Removes an existing scope.
            </summary>
            <param name="scope">The scope to delete.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeStore`2.GetAsync``2(System.Func{System.Linq.IQueryable{`0},``0,System.Linq.IQueryable{``1}},``0,System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns the first element.
            </summary>
            <typeparam name="TState">The state type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="state">The optional state.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the first element returned when executing the query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeStore`2.GetDescriptionAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the description associated with a scope.
            </summary>
            <param name="scope">The scope.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the description associated with the specified scope.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeStore`2.GetNameAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the name associated with a scope.
            </summary>
            <param name="scope">The scope.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the name associated with the specified scope.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeStore`2.InstantiateAsync(System.Threading.CancellationToken)">
            <summary>
            Instantiates a new scope.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the instantiated scope, that can be persisted in the database.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeStore`2.ListAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns all the corresponding elements.
            </summary>
            <param name="count">The number of results to return.</param>
            <param name="offset">The number of results to skip.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns all the elements returned when executing the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeStore`2.ListAsync``2(System.Func{System.Linq.IQueryable{`0},``0,System.Linq.IQueryable{``1}},``0,System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns all the corresponding elements.
            </summary>
            <typeparam name="TState">The state type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="state">The optional state.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns all the elements returned when executing the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeStore`2.SetDescriptionAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the description associated with a scope.
            </summary>
            <param name="scope">The scope.</param>
            <param name="description">The description associated with the authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeStore`2.SetNameAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the name associated with a scope.
            </summary>
            <param name="scope">The scope.</param>
            <param name="name">The name associated with the authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeStore`2.UpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Updates an existing scope.
            </summary>
            <param name="scope">The scope to update.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeStore`2.ConvertIdentifierFromString(System.String)">
            <summary>
            Converts the provided identifier to a strongly typed key object.
            </summary>
            <param name="identifier">The identifier to convert.</param>
            <returns>An instance of <typeparamref name="TKey"/> representing the provided identifier.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictScopeStore`2.ConvertIdentifierToString(`1)">
            <summary>
            Converts the provided identifier to its string representation.
            </summary>
            <param name="identifier">The identifier to convert.</param>
            <returns>A <see cref="T:System.String"/> representation of the provided identifier.</returns>
        </member>
        <member name="T:OpenIddict.Core.OpenIddictTokenStore`4">
            <summary>
            Provides methods allowing to manage the tokens stored in a database.
            Note: this base class can only be used with the default OpenIddict entities.
            </summary>
            <typeparam name="TToken">The type of the Token entity.</typeparam>
            <typeparam name="TApplication">The type of the Application entity.</typeparam>
            <typeparam name="TAuthorization">The type of the Authorization entity.</typeparam>
            <typeparam name="TKey">The type of the entity primary keys.</typeparam>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenStore`4.CountAsync(System.Threading.CancellationToken)">
            <summary>
            Determines the number of tokens that exist in the database.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the number of applications in the database.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenStore`4.CountAsync``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Threading.CancellationToken)">
            <summary>
            Determines the number of tokens that match the specified query.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the number of tokens that match the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenStore`4.CreateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Creates a new token.
            </summary>
            <param name="token">The token to create.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation, whose result returns the token.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenStore`4.DeleteAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Removes a token.
            </summary>
            <param name="token">The token to delete.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenStore`4.FindByApplicationIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the list of tokens corresponding to the specified application identifier.
            </summary>
            <param name="identifier">The application identifier associated with the tokens.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the tokens corresponding to the specified application.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenStore`4.FindByAuthorizationIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the list of tokens corresponding to the specified authorization identifier.
            </summary>
            <param name="identifier">The authorization identifier associated with the tokens.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the tokens corresponding to the specified authorization.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenStore`4.FindByIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves a token using its unique identifier.
            </summary>
            <param name="identifier">The unique identifier associated with the token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the token corresponding to the unique identifier.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenStore`4.FindByReferenceIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the list of tokens corresponding to the specified reference identifier.
            Note: the reference identifier may be hashed or encrypted for security reasons.
            </summary>
            <param name="identifier">The reference identifier associated with the tokens.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the tokens corresponding to the specified reference identifier.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenStore`4.FindBySubjectAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the list of tokens corresponding to the specified subject.
            </summary>
            <param name="subject">The subject associated with the tokens.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the tokens corresponding to the specified subject.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenStore`4.GetAsync``2(System.Func{System.Linq.IQueryable{`0},``0,System.Linq.IQueryable{``1}},``0,System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns the first element.
            </summary>
            <typeparam name="TState">The state type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="state">The optional state.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the first element returned when executing the query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenStore`4.GetApplicationIdAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the optional application identifier associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the application identifier associated with the token.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenStore`4.GetAuthorizationIdAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the optional authorization identifier associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the authorization identifier associated with the token.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenStore`4.GetCreationDateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the creation date associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the creation date associated with the specified token.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenStore`4.GetExpirationDateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the expiration date associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the expiration date associated with the specified token.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenStore`4.GetIdAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the unique identifier associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the unique identifier associated with the token.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenStore`4.GetPayloadAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the payload associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the payload associated with the specified token.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenStore`4.GetReferenceIdAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the reference identifier associated with a token.
            Note: depending on the manager used to create the token,
            the reference identifier may be hashed for security reasons.
            </summary>
            <param name="token">The token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the reference identifier associated with the specified token.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenStore`4.GetStatusAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the status associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the status associated with the specified token.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenStore`4.GetSubjectAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the subject associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the subject associated with the specified token.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenStore`4.GetTokenTypeAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Retrieves the token type associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the token type associated with the specified token.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenStore`4.InstantiateAsync(System.Threading.CancellationToken)">
            <summary>
            Instantiates a new token.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns the instantiated token, that can be persisted in the database.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenStore`4.ListAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns all the corresponding elements.
            </summary>
            <param name="count">The number of results to return.</param>
            <param name="offset">The number of results to skip.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns all the elements returned when executing the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenStore`4.ListAsync``2(System.Func{System.Linq.IQueryable{`0},``0,System.Linq.IQueryable{``1}},``0,System.Threading.CancellationToken)">
            <summary>
            Executes the specified query and returns all the corresponding elements.
            </summary>
            <typeparam name="TState">The state type.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="query">The query to execute.</param>
            <param name="state">The optional state.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns all the elements returned when executing the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenStore`4.ListInvalidAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Lists the tokens that are marked as expired or invalid
            and that can be safely removed from the database.
            </summary>
            <param name="count">The number of results to return.</param>
            <param name="offset">The number of results to skip.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation,
            whose result returns all the elements returned when executing the specified query.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenStore`4.SetAuthorizationIdAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the authorization identifier associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="identifier">The unique identifier associated with the token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenStore`4.SetApplicationIdAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the application identifier associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="identifier">The unique identifier associated with the token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenStore`4.SetCreationDateAsync(`0,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary>
            Sets the creation date associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="date">The creation date.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenStore`4.SetExpirationDateAsync(`0,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary>
            Sets the expiration date associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="date">The expiration date.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenStore`4.SetPayloadAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the payload associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="payload">The payload associated with the token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenStore`4.SetReferenceIdAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the reference identifier associated with a token.
            Note: depending on the manager used to create the token,
            the reference identifier may be hashed for security reasons.
            </summary>
            <param name="token">The token.</param>
            <param name="identifier">The reference identifier associated with the token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenStore`4.SetStatusAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the status associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="status">The status associated with the authorization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenStore`4.SetSubjectAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the subject associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="subject">The subject associated with the token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenStore`4.SetTokenTypeAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the token type associated with a token.
            </summary>
            <param name="token">The token.</param>
            <param name="type">The token type associated with the token.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenStore`4.UpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Updates an existing token.
            </summary>
            <param name="token">The token to update.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that can be used to abort the operation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that can be used to monitor the asynchronous operation.
            </returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenStore`4.ConvertIdentifierFromString(System.String)">
            <summary>
            Converts the provided identifier to a strongly typed key object.
            </summary>
            <param name="identifier">The identifier to convert.</param>
            <returns>An instance of <typeparamref name="TKey"/> representing the provided identifier.</returns>
        </member>
        <member name="M:OpenIddict.Core.OpenIddictTokenStore`4.ConvertIdentifierToString(`3)">
            <summary>
            Converts the provided identifier to its string representation.
            </summary>
            <param name="identifier">The identifier to convert.</param>
            <returns>A <see cref="T:System.String"/> representation of the provided identifier.</returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.OpenIddictBuilder">
            <summary>
            Exposes the necessary methods required to configure OpenIddict.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictBuilder.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictBuilder"/>.
            </summary>
            <param name="services">The services collection.</param>
        </member>
        <member name="P:Microsoft.Extensions.DependencyInjection.OpenIddictBuilder.ApplicationType">
            <summary>
            Gets or sets the type corresponding to the Application entity.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.DependencyInjection.OpenIddictBuilder.AuthorizationType">
            <summary>
            Gets or sets the type corresponding to the Authorization entity.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.DependencyInjection.OpenIddictBuilder.ScopeType">
            <summary>
            Gets or sets the type corresponding to the Scope entity.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.DependencyInjection.OpenIddictBuilder.TokenType">
            <summary>
            Gets or sets the type corresponding to the Token entity.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.DependencyInjection.OpenIddictBuilder.Services">
            <summary>
            Gets the services collection.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictBuilder.AddApplicationManager``1">
            <summary>
            Adds a custom application manager derived from
            <see cref="T:OpenIddict.Core.OpenIddictApplicationManager`1"/>.
            </summary>
            <typeparam name="TManager">The type of the custom manager.</typeparam>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictBuilder.AddApplicationManager(System.Type)">
            <summary>
            Adds a custom application manager derived from
            <see cref="T:OpenIddict.Core.OpenIddictApplicationManager`1"/>.
            </summary>
            <param name="type">The type of the custom manager.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictBuilder.AddApplicationStore``1">
            <summary>
            Adds a custom application store derived from
            <see cref="T:OpenIddict.Core.IOpenIddictApplicationStore`1"/>.
            </summary>
            <typeparam name="TStore">The type of the custom store.</typeparam>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictBuilder.AddApplicationStore(System.Type)">
            <summary>
            Adds a custom application store derived from
            <see cref="T:OpenIddict.Core.IOpenIddictApplicationStore`1"/>.
            </summary>
            <param name="type">The type of the custom store.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictBuilder.AddAuthorizationManager``1">
            <summary>
            Adds a custom authorization manager derived from
            <see cref="T:OpenIddict.Core.OpenIddictAuthorizationManager`1"/>.
            </summary>
            <typeparam name="TManager">The type of the custom manager.</typeparam>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictBuilder.AddAuthorizationManager(System.Type)">
            <summary>
            Adds a custom authorization manager derived from
            <see cref="T:OpenIddict.Core.OpenIddictAuthorizationManager`1"/>.
            </summary>
            <param name="type">The type of the custom manager.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictBuilder.AddAuthorizationStore``1">
            <summary>
            Adds a custom authorization store derived from
            <see cref="T:OpenIddict.Core.IOpenIddictAuthorizationStore`1"/>.
            </summary>
            <typeparam name="TStore">The type of the custom store.</typeparam>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictBuilder.AddAuthorizationStore(System.Type)">
            <summary>
            Adds a custom authorization store derived from
            <see cref="T:OpenIddict.Core.IOpenIddictAuthorizationStore`1"/>.
            </summary>
            <param name="type">The type of the custom store.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictBuilder.AddScopeManager``1">
            <summary>
            Adds a custom scope manager derived from
            <see cref="T:OpenIddict.Core.OpenIddictScopeManager`1"/>.
            </summary>
            <typeparam name="TManager">The type of the custom manager.</typeparam>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictBuilder.AddScopeManager(System.Type)">
            <summary>
            Adds a custom scope manager derived from
            <see cref="T:OpenIddict.Core.OpenIddictScopeManager`1"/>.
            </summary>
            <param name="type">The type of the custom manager.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictBuilder.AddScopeStore``1">
            <summary>
            Adds a custom scope store derived from
            <see cref="T:OpenIddict.Core.IOpenIddictScopeStore`1"/>.
            </summary>
            <typeparam name="TStore">The type of the custom store.</typeparam>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictBuilder.AddScopeStore(System.Type)">
            <summary>
            Adds a custom scope store derived from
            <see cref="T:OpenIddict.Core.IOpenIddictScopeStore`1"/>.
            </summary>
            <param name="type">The type of the custom store.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictBuilder.AddTokenManager``1">
            <summary>
            Adds a custom token manager derived from
            <see cref="T:OpenIddict.Core.OpenIddictTokenManager`1"/>.
            </summary>
            <typeparam name="TManager">The type of the custom manager.</typeparam>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictBuilder.AddTokenManager(System.Type)">
            <summary>
            Adds a custom token manager derived from
            <see cref="T:OpenIddict.Core.OpenIddictTokenManager`1"/>.
            </summary>
            <param name="type">The type of the custom manager.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictBuilder.AddTokenStore``1">
            <summary>
            Adds a custom token store derived from
            <see cref="T:OpenIddict.Core.IOpenIddictTokenStore`1"/>.
            </summary>
            <typeparam name="TStore">The type of the custom store.</typeparam>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictBuilder.AddTokenStore(System.Type)">
            <summary>
            Adds a custom token store derived from
            <see cref="T:OpenIddict.Core.IOpenIddictTokenStore`1"/>.
            </summary>
            <param name="type">The type of the custom store.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictExtensions.AddOpenIddict(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers the default OpenIddict services in the DI container,
            using the default entities and the default entity key type.
            </summary>
            <param name="services">The services collection.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictExtensions.AddOpenIddict``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers the default OpenIddict services in the DI container,
            using the default entities and the specified entity key type.
            </summary>
            <typeparam name="TKey">The type of the entity primary keys.</typeparam>
            <param name="services">The services collection.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictExtensions.AddOpenIddict``4(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers the default OpenIddict services in the DI container, using the specified entities.
            </summary>
            <typeparam name="TApplication">The type of the Application entity.</typeparam>
            <typeparam name="TAuthorization">The type of the Authorization entity.</typeparam>
            <typeparam name="TScope">The type of the Scope entity.</typeparam>
            <typeparam name="TToken">The type of the Token entity.</typeparam>
            <param name="services">The services collection.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.OpenIddictBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictExtensions.AddOpenIddict(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.DependencyInjection.OpenIddictBuilder})">
            <summary>
            Registers the default OpenIddict services in the DI container,
            using the default entities and the default entity key type.
            </summary>
            <param name="services">The services collection.</param>
            <param name="configuration">The configuration delegate used to register new services.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictExtensions.AddOpenIddict``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.DependencyInjection.OpenIddictBuilder})">
            <summary>
            Registers the default OpenIddict services in the DI container,
            using the default entities and the specified entity key type.
            </summary>
            <typeparam name="TKey">The type of the entity primary keys.</typeparam>
            <param name="services">The services collection.</param>
            <param name="configuration">The configuration delegate used to register new services.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenIddictExtensions.AddOpenIddict``4(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.DependencyInjection.OpenIddictBuilder})">
            <summary>
            Registers the default OpenIddict services in the DI container, using the specified entities.
            </summary>
            <typeparam name="TApplication">The type of the Application entity.</typeparam>
            <typeparam name="TAuthorization">The type of the Authorization entity.</typeparam>
            <typeparam name="TScope">The type of the Scope entity.</typeparam>
            <typeparam name="TToken">The type of the Token entity.</typeparam>
            <param name="services">The services collection.</param>
            <param name="configuration">The configuration delegate used to register new services.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</returns>
        </member>
    </members>
</doc>
